<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2016-11-08T15:14:09Z by 'extract-isosch.xsl'. -->

   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns prefix="ead" uri="urn:isbn:1-931666-22-9"/>
   <ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>

   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="EHRI_broad-archdesc-constraint-levelRequired-3">
                <rule context="ead:archdesc">
                  <assert role="MUST-WP19" test="@level" >archdesc MUST have a level-attribute</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-archdescLevelValues-4">
                <rule context="ead:archdesc">
                  <assert role="COULD"
                 test="@level = 'fonds' or @level = 'recordGrp' or @level = 'collection' or @level='otherlevel'"> The value of the archdesc level attribute SHOULD be 'fonds', 'recordGrp',
                    'collection' ot 'otherlevel'.</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-orignationDesirable-5">
                <rule context="ead:archdesc">
         <assert role="SHOULD"
                 test="ead:did/ead:origination and normalize-space(ead:did/ead:origination)">archdesc SHOULD have a non-empty origination</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-archdescProcessinfoDesirable-6">
                <rule context="ead:archdesc">
                  <assert role="SHOULD-WP17" test="normalize-space(ead:processinfo)">archdesc-processinfo SHOULD not be
                    empty</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-archdescProcessinfoDateDesirable-7">
                <rule context="ead:archdesc">
         <assert role="SHOULD-WP17"
                 test="normalize-space(ead:processinfo/ead:p/ead:date)">archdesc-processinfo
                    SHOULD have a non empty date</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-langmaterialPossible-8">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:did/ead:langmaterial">archdesc COULD have a
                  langmaterial</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-custodhistPossible-9">
                <rule context="ead:archdesc">
                  <assert role="COULD" test="ead:custodhist">archdesc COULD have a custodhist</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-otherfindaidPossible-10">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:otherfindaid">archdesc COULD have an otherfindaid</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-originalslocPossible-11">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:originalsloc">archdesc COULD have an originalsloc</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-altformavailPossible-12">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:altformavail">archdesc COULD have an altformavail</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-bibliographyPossible-13">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:bibliography">archdesc COULD have a bibliography</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-oddPossible-14">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:odd">archdesc COULD have an odd</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-notePossible-15">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:note">archdesc COULD have a note</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-scopecontentPossible-16">
                <rule context="ead:archdesc">
                  <assert role="COULD" test="ead:scopecontent">archdesc COULD have a scopecontent</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-controlaccessPossible-17">
                <rule context="ead:archdesc">
         <assert role="COULD" test="ead:controlaccess">archdesc COULD have a controlaccess</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-archdesc-constraint-scopecontentInArchdescOrC-18">
                <rule context="ead:archdesc">
                  <assert test="ead:scopecontent or ead:dsc/ead:c01/descendant-or-self::ead:scopecontent">a scopecontent element should be present at least in archdesc if not in the c
                    elements</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c01-constraint-levelRequired-19">
                <rule context="ead:c01">
                  <assert role="MUST-WP19" test="@level">c01 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c02-constraint-levelRequired-20">
                <rule context="ead:c02">
                  <assert role="MUST-WP19" test="@level">c02 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c03-constraint-levelRequired-21">
                <rule context="ead:c03">
                  <assert role="MUST-WP19" test="@level">c03 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c04-constraint-levelRequired-22">
                <rule context="ead:c04">
                  <assert role="MUST-WP19" test="@level">c04 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c05-constraint-levelRequired-23">
                <rule context="ead:c05">
                  <assert role="MUST-WP19" test="@level">c05 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c06-constraint-levelRequired-24">
                <rule context="ead:c06">
                  <assert role="MUST-WP19" test="@level">c06 MUST have a level-attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-c06-constraint-noc07c12-25">
                <rule context="ead:c06">
                  <report role="SHOULD-WP11" test="ead:c07"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c07-constraint-noc07c12-26">
                <rule context="ead:c07">
                  <report role="SHOULD-WP11" test="ead:c08"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c08-constraint-noc07c12-27">
                <rule context="ead:c08">
                  <report role="SHOULD-WP11" test="ead:c09"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c09-constraint-noc07c12-28">
                <rule context="ead:c09">
                  <report role="SHOULD-WP11" test="ead:c10"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c10-constraint-noc07c12-29">
                <rule context="ead:c10">
                  <report role="SHOULD-WP11" test="ead:c11"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-c11-constraint-noc07c12-30">
                <rule context="ead:c11">
                  <report role="SHOULD-WP11" test="ead:c12"> c subelements SHOULD be between c01 and c06 </report>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-change-constraint-change-date-item-31">
                <rule context="ead:change">
                  <!-- 'change' element in 'revisiondesc' -->
                  <assert test=".[ead:date and ead:item]"> 'revisiondesc/change'
                    element must contain both a date and an item subelement. </assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-change-constraint-dateNotEmpty-32">
                <rule context="ead:change">
         <assert role="SHOULD-WP17" test="normalize-space(ead:date)">a revisiondesc/change SHOULD have a not empty
                    date</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-controlaccess-constraint-controlaccessSubjectPossible-33">
                <rule context="ead:controlaccess">
         <assert role="COULD" test="ead:subject">controlaccess COULD have a subject</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-controlaccess-constraint-controlaccessPlacePossible-34">
                <rule context="ead:controlaccess">
         <assert role="COULD" test="ead:geogname">controlaccess COULD have a geogname</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-controlaccess-constraint-controlaccessPersnamePossible-35">
                <rule context="ead:controlaccess">
                  <assert role="COULD" test="ead:persname">controlaccess COULD have a persname</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-controlaccess-constraint-controlaccessorgnamePossible-36">
                <rule context="ead:controlaccess">
                  <assert role="COULD" test="ead:orgname">controlaccess COULD have a orgname</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-controlaccess-constraint-authfilenumberPossible-37">
              <rule context="ead:controlaccess">
                <assert role="COULD-WP11" test=".[@authfilenumber and @source]"> Access points could be chosen in an authority
                  list. This list should be declared in a @source attribute. The related id of this
                  authority should be declared in an @authfilenumber attribute </assert>
              </rule>
            </pattern>
   <pattern id="EHRI_broad-did-constraint-unitidRequired-38">
                <rule context="ead:did">
         <assert role="MUST-WP19" test="ead:unitid">a did MUST have a unitid, according 17.3 and WP19</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-did-constraint-unittitleRequired-39">
                <rule context="ead:did">
                  <assert role="MUST-WP19" test="ead:unittitle">a did MUST have a unittitle, according 17.3</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-did-constraint-unittitleNotEmpty-40">
                <rule context="ead:did">
         <assert role="MUST-WP19" test="count(ead:unittitle[text()]) &gt; 0">a did MUST have at least one non-empty
                    unittitle</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-dsc-constraint-dscType-41">
                <rule context="ead:dsc">
                  <assert role="MUST-EAD" test="@type">dsc MUST have a type attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-dsc-constraint-dscothertype-42">
                <rule context="ead:dsc">
                  <assert role="MUST-EAD"
                 test="not(@type ='othertype') or (@othertype and not(@othertype=''))">dsc MUST
                    have a type attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-eadheader-constraint-parallelTitleEnglish-43">
                <rule context="ead:eadheader">
                  <assert test="ead:profiledesc/ead:langusage/@langcode = 'eng'">If the language of the
                    description is not English, a parallel form of the title in English should be
                    added.</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-eadheader-constraint-profiledescRequired-44">
                <rule context="ead:eadheader">
                  <assert role="MUST-WP19" test="ead:profiledesc">eadheader must contain a profiledesc
                  element</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-eadheader-constraint-langcodeNotEng-45">
                <rule context="ead:eadheader">
                  <assert test="ead:profiledesc/ead:langusage/ead:language/@langcode = 'eng'"
                 role="SHOULD-WP11">If the language of the description is not English, a parallel
                    form of the title in English should be added.</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-eadheader-constraint-creationDateNotempty-46">
                <rule context="ead:eadheader">
         <assert test="ead:creation/ead:date and normalize-space(ead:creation/ead:date)">eadheader COULD have a non-empty creation-date</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-eadid-constraint-mustContainText-47">
                <rule context="ead:eadid">
         <assert role="MUST-WP19" test="normalize-space(.)">eadid must contain text</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-eadid-constraint-creationDesirable-48">
                <rule context="ead:eadid"> 
         <assert role="SHOULD-WP17" test="@mainagencycode"> eadid SHOULD contain a mainagencycode attribute
                  </assert> 
      </rule>
              </pattern>
   <pattern id="EHRI_broad-language-constraint-langcodeRequired-49">
                <rule context="ead:language">
         <assert role="MUST-WP19" test="@langcode">language MUST have a langcode attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-language-constraint-scriptcodeRequired-50">
                <rule context="ead:language">
         <assert role="SHOULD-WP17" test="@scriptcode">language SHOULD have a scriptcode attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-physdesc-constraint-nonemptyPhysdescDesirable-51">
                <rule context="ead:physdesc">
         <assert role="SHOULD-WP17" test="normalize-space(ead:extent[1])">a did SHOULD have a non-empty
                    physdesc-extent, according to 17.3</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-profiledesc-constraint-langusageRequired-52">
                <rule context="ead:profiledesc">
         <assert role="MUST-WP19" test="ead:langusage/ead:language">eadheader MUST contain a langusage/language
                    element</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-profiledesc-constraint-creationDesirable-53">
                <rule context="ead:profiledesc">
         <assert role="SHOULD-WP17" test="ead:creation">eadheader should contain a creation element</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-profiledesc-constraint-descrules-54">
                <rule context="ead:profiledesc">
                  <assert role="WP11" test="not(normalize-space(ead:descrules))">descrules has a default value added
                    automatically by EHRI.</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-publicationstmt-constraint-notempty-55">
                <rule context="ead:publicationstmt">
                  <assert role="SHOULD-WP17" test="ead:publisher">eadheader SHOULD specify a publisher</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-unitdate-constraint-labelDesirable-56">
                <rule context="ead:unitdate">
         <assert role="COULD-WP17"
                 test="normalize-space(@label) or normalize-space(@encodinganalog)">unitdates
                    COULD have a label, describing the type of date, according 17.3</assert>
      </rule>
                <!-- Not really sure. The original constraint is :
                            <sch:assert role="COULD"
                test="not(unitdate) or (unitdate/@label and not(unitdate/@label = '')) or (unitdate/@encodinganalog and not(unitdate/@encodinganalog = ''))"
                >unitdates COULD have a label, describing the type of date, according
                17.3</sch:assert>
                            -->
              </pattern>
   <pattern id="EHRI_broad-unitdate-constraint-normalDesirableOrNotEmpty-57">
                <rule context="ead:unitdate"> 
         <assert role="COULD-WP17" test="text() or normalize-space(@normal)"> unitdate should be not empty or have
                    a non-empty @normal attribute </assert> 
      </rule>
              </pattern>
   <pattern id="EHRI_broad-unitdate-constraint-normalNotEmtpy-58">
                <rule context="ead:unitdate">
         <assert role="SHOULD-WP19" test="normalize-space(@normal)">unitdate should have a non-empty @normal
                    attribute</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-unitdate-constraint-normalRegex-59">
                <rule context="ead:unitdate">
                  <!-- check date format -->
                  <assert role="MUST-EAD"
                 test="matches(@normal, '^(\d{4}-?\d{2}-?\d{2}/?){1,2}$')">date format MUST be
                    valid</assert>
                  <!-- check existence of start date -->
                  <let name="start-date" value="replace(@normal, '/.*', '')"/>
                  <let name="start-date" value="replace($start-date, '-', '')"/>
                  <let name="start-date"
              value="string-join((substring($start-date, 1, 4), substring($start-date, 5, 2), substring($start-date, 7, 2)), '-')"/>
                  <assert role="MUST-EAD" test="$start-date castable as xs:date">start date MUST exist</assert>
                  <!-- check existence of end date -->
                  <let name="end-date" value="replace(@normal, '.*/', '')"/>
                  <let name="end-date" value="replace($end-date, '-', '')"/>
                  <let name="end-date"
              value="string-join((substring($end-date, 1, 4), substring($end-date, 5, 2), substring($end-date, 7, 2)), '-')"/>
                  <assert role="MUST-EAD" test="$end-date castable as xs:date">end date MUST
                    exist</assert>
                </rule>
                <!-- 
                 My old rule
                 <rule xmlns="http://purl.oclc.org/dsdl/schematron" context="ead:unitdate"><assert
                    xmlns="http://purl.oclc.org/dsdl/schematron" role="WP11"
                    test="matches(@normal, '^(([0-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-9][0-9]{3}))-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$')"
                    >@normal attribute must respect ISO8601 pattern = YYYY-MM-DD</assert></rule>-->
              </pattern>
   <pattern id="EHRI_broad-date-constraint-dateNormal-60">
                <rule context="ead:date">
         <assert role="WP11"
                 test="matches(@normal, '^(([0-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-9][0-9]{3}))-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$')">@normal attribute must respect ISO8601 pattern = YYYY-MM-DD</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-unitid-constraint-notEmpty-61">
                <rule context="ead:unitid">
         <assert role="SHOULD-WP17" test="normalize-space(.)">a unitid SHOULD not be empty</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-unitid-constraint-uniqueId-62">
                <!-- All the <unitid> have @label="ehri_main_identifer" ? -->
                <rule context="ead:unitid">
         <assert role="MUST-WP19"
                 test="count(//ead:unitid[@label = 'ehri_main_identifier']) = count(distinct-values(//unitid[@label = 'ehri_main_identifier']))">unitid's MUST be unique within one eadfile, according 17.3</assert>
      </rule>
              </pattern>
   <pattern id="EHRI_broad-unitid-constraint-Regexrepositorycode-63">
                <rule context="*[@repositorycode][preceding::ead:control/@repositoryencoding = 'iso15511']">
                  <let name="iso15511Pattern"
              value="'(^([A-Z]{2})|([a-zA-Z]{1})|([a-zA-Z]{3,4}))(-[a-zA-Z0-9:/\-]{1,11})$'"/>
                  <assert test="matches(@repositorycode, $iso15511Pattern)">If the repositoryencoding is
                    set to iso15511, the format of the value of the <emph>repositorycode</emph>
                    attribute of <name/> is constrained to that of the International Standard
                    Identifier for Libraries and Related Organizations (ISIL: ISO 15511): a prefix,
                    a dash, and an identifier. </assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-altformavail-constraint-copyLinking-64">
                <rule context="ead:altformavail/ead:p">
                  <assert role="WP11" test="not(normalize-space(.))"> If the element altforlavail is not empty, you
                    COULD try to identify if the originals are present in the EHRI portal and make a
                    link between the two descriptions</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-originalsloc-constraint-originalsLinking-65">
                <rule context="ead:originalsloc/ead:p">
                  <assert role="WP11" test="not(normalize-space(.))"> If the element originalsloc is not empty, you
                    COULD try to identify if copies are present in the EHRI portal and make a link
                    between the two descriptions </assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-langmaterial-constraint-langmaterialLanguage-66">
                <rule context="ead:langmaterial">
                    <assert role="WP11" test="ead:language">langmaterial COULD have a language sub element</assert>
                </rule>
              </pattern>
   <pattern id="EHRI_broad-att.desc.c-level-constraint-otherlevel-67">
                    <rule context="ead:ead">
         <assert role="MUST-EAD"
                 test="not(@level = 'otherlevel') or (@otherlevel and not(@otherlevel = ''))">If the attribute level has the value 'otherlevel', an attribute otherlevel
                        MUST be added</assert>
      </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.desc.c-level-constraint-levelFonds-68">
                    <rule context="ead:ead">
         <assert role="SHOULD-WP19" test="not(@level = 'fonds') or name(.) = 'archdesc'">ONLY the archdesc can
                        be fonds level</assert>
      </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.desc.c-level-constraint-recordgrplevel-69">
                    <rule context="ead:ead">
         <assert role="SHOULD-WP19"
                 test="not(@level = 'recordgrp')                         or (parent::*[@level = 'recordgrp'] or (name(.) = 'archdesc') or (name(.) = 'c01') and ancestor::*[@level = 'recordgrp'])">recordgrp SHOULD be a child of another recordgrp</assert>
      </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.desc.c-level-constraint-subgrpLevel-70">
                    <rule context="ead:ead">
         <assert role="SHOULD-WP19"
                 test="not(@level = 'subgrp')                         or ((parent::*[@level = 'recordgrp' or @level = 'subgrp']) or (name(.) = 'c01') and ancestor::*[@level = 'recordgrp'])">subgrp SHOULD be a child of another subgrp or a recordgrp</assert>
      </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.desc.c-level-constraint-subseriesLevel-71">
                    <rule context="ead:ead">
         <assert role="SHOULD-WP19"
                 test="not(@level = 'subseries') or parent::*[@level = 'subseries' or @level = 'series']">subseries SHOULD be a child of another subseries or a
                      series</assert>
      </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.langcode-langcode-constraint-regexLangcode-72">
                    <rule context="*[exists(@langcode)]">
                      <let name="langcodes" value="document(' //SOURCE OF THE CODES// ')"/>
                      <let name="code" value="normalize-space(@langcode)"/>
                      <assert test="$langcodes//tei:f[@name='subType']/tei:symbol/@value = $code "> The
                        langcode attribute should contain a code from the ISO 639 codelist.
                      </assert>
                    </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.scriptcode-scriptcode-constraint-ISOcode-Scriptcode-73">
                    <rule context="*[exists(@scriptcode)]">
                      <let name="scriptcodes"
              value="document('https://raw.githubusercontent.com/ParthenosWP4/standardsLibrary/master/ISO/ISO15924/ISO159242XML/ISO15924_TEI.xml')"/>
                      <let name="code" value="normalize-space(@scriptcode)"/>
                      <assert test="$scriptcodes//tei:f[@name='code']/tei:symbol/@value = $code "> The
                        script or scriptcode attribute should contain a code from the iso_15924
                        codelist. </assert>
                    </rule>
                  </pattern>
   <pattern id="EHRI_broad-att.coded-countrycode-constraint-ISO-countrycode-74">
                    <rule context="*[exists(@countrycode)]">
                      <let name="countrycodes"
              value="document('https://raw.githubusercontent.com/ParthenosWP4/standardsLibrary/master/ISO/ISO3166/ISO3166_TEI.xml')"/>
                      <let name="code" value="normalize-space(@countrycode)"/>
                      <assert test="$countrycodes//tei:f[@name='a2code']/tei:symbol/@value = $code "> The
                        countrycode attribute should contain a code from the ISO 3166-1
                        codelist.</assert>
                    </rule>
                  </pattern>
</schema>
